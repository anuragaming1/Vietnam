-- Script Auto Bounty Anura Hub - Part1.lua -- Bao gồm: Combat, Combo, Aimbot, PvP Support

local Players = game:GetService("Players") local LocalPlayer = Players.LocalPlayer local RunService = game:GetService("RunService") local TweenService = game:GetService("TweenService") local ReplicatedStorage = game:GetService("ReplicatedStorage") local Camera = workspace.CurrentCamera

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait() local HRP = Character:WaitForChild("HumanoidRootPart") local Humanoid = Character:WaitForChild("Humanoid")

-- CONFIG local Config = { TP_SPEED = 250, COMBO_DELAY = 0.7, OFFSET = Vector3.new(0, 10, 0), TargetRefreshRate = 1, AutoPvP = true, AutoAura = true, AutoInstinct = true, AutoV4 = true, AutoSeaBeast = true, Combo = { {Weapon = "Melee", Key = "C"}, {Weapon = "Melee", Key = "X"}, {Weapon = "Fruit", Key = "Z"}, {Weapon = "Fruit", Key = "X"}, {Weapon = "Melee", Key = "Z"}, {Weapon = "Sword", Key = "Z"}, {Weapon = "Gun", Key = "X"}, {Weapon = "Fruit", Key = "C"}, {Weapon = "Sword", Key = "X"}, {Weapon = "Gun", Key = "Z"}, {Weapon = "Fruit", Key = "V"}, {Weapon = "Fruit", Key = "F"} }, WeaponKeys = { Melee = "One", Sword = "Two", Gun = "Three", Fruit = "Four" }, AutoAim = true }

local function PressKey(key) keypress(Enum.KeyCode[key]) task.wait(0.05) keyrelease(Enum.KeyCode[key]) end

local function SwitchWeapon(weaponType) if Config.WeaponKeys[weaponType] then PressKey(Config.WeaponKeys[weaponType]) task.wait(0.07) end end

local function AimAt(target) if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then Camera.CFrame = CFrame.new(Camera.CFrame.Position, target.Character.HumanoidRootPart.Position) end end

local function DoCombo(target) for _, skill in ipairs(Config.Combo) do if target and target.Character then SwitchWeapon(skill.Weapon) PressKey(skill.Key) task.wait(Config.COMBO_DELAY) end end SwitchWeapon("Melee") end

local function EnableSupports() if Config.AutoPvP then pcall(function() ReplicatedStorage.Remotes.CommF_:InvokeServer("EnablePvp") end) end if Config.AutoAura then PressKey("J") end if Config.AutoInstinct then PressKey("E") end if Config.AutoV4 then PressKey("T") end end

-- Continue at Part.lua: Targeting, TweenTP, Avoidance, Death Logic print("[Anura Hub] Part1 Loaded: Combat & Combo")

-- // Anura Hub - Auto Bounty Part1.lua (UI & HUD) | 30/4 TỰ HÀO VIỆT NAM
local Players, RunService, Lighting, HttpService = game:GetService("Players"), game:GetService("RunService"), game:GetService("Lighting"), game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

-- Chống lag
for _, v in ipairs(Lighting:GetDescendants()) do
    if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") then
        v.Enabled = false
    end
end

-- Config
getgenv().BountyConfig = {
    AttackRange = 10000,
    ComboDelay = 0.7,
    WeaponDelay = 0.07,
    AutoPvP = true,
    TweenSpeed = 300,
    Team = "Pirates", -- hoặc "Marines"
    UI_Toggle = true,
    SeaBeastAt = 10000000
}

-- UI
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
ScreenGui.Name = "AnuraAutoBounty"
local Main = Instance.new("Frame", ScreenGui)
Main.Size = UDim2.new(0, 300, 0, 220)
Main.Position = UDim2.new(0.5, -150, 0.1, 0)
Main.BackgroundTransparency = 0.2
Main.BorderSizePixel = 0
Main.Draggable = true
Main.Active = true

-- Viền 7 màu nhấp nháy
local colors = {"Red", "Orange", "Yellow", "Green", "Cyan", "Blue", "Magenta"}
local stroke = Instance.new("UIStroke", Main)
stroke.Thickness = 3
stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
stroke.Color = Color3.fromRGB(255, 0, 0)
spawn(function()
    local i = 1
    while task.wait(0.3) do
        stroke.Color = BrickColor.new(colors[i % #colors + 1]).Color
        i = i + 1
    end
end)

-- Logo + Toggle UI
local Logo = Instance.new("ImageButton", Main)
Logo.Size = UDim2.new(0, 30, 0, 30)
Logo.Position = UDim2.new(0, 5, 0, 5)
Logo.Image = "rbxassetid://131220073739500"
Logo.MouseButton1Click:Connect(function()
    Main.Visible = not Main.Visible
end)

-- HUD
local Title = Instance.new("TextLabel", Main)
Title.Size = UDim2.new(1, -40, 0, 30)
Title.Position = UDim2.new(0, 35, 0, 0)
Title.Text = "TỰ HÀO VIỆT NAM 30/4"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextScaled = true
Title.BackgroundTransparency = 1

local InfoLabels = {}
local infos = {"Target:", "Tổng Bounty Kill:", "FPS:", "Thời gian:", "Số người server:"}
for i, text in ipairs(infos) do
    local lbl = Instance.new("TextLabel", Main)
    lbl.Size = UDim2.new(1, -10, 0, 20)
    lbl.Position = UDim2.new(0, 5, 0, 35 + (i - 1) * 22)
    lbl.Text = text
    lbl.Name = "Info" .. i
    lbl.BackgroundTransparency = 1
    lbl.TextColor3 = Color3.fromRGB(255, 255, 255)
    lbl.TextScaled = true
    InfoLabels[text] = lbl
end

-- Nút Next Player
local NextBtn = Instance.new("TextButton", Main)
NextBtn.Size = UDim2.new(1, -10, 0, 25)
NextBtn.Position = UDim2.new(0, 5, 1, -30)
NextBtn.Text = "Next Player"
NextBtn.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
NextBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
NextBtn.TextScaled = true
NextBtn.MouseButton1Click:Connect(function()
    getgenv().Anura_NextTarget = true
end)

-- Auto update HUD
local startTime = tick()
spawn(function()
    while true do
        task.wait(0.5)
        local target = getgenv().Anura_CurrentTarget
        InfoLabels["Target:"].Text = "Target: " .. (target and target.Name or "None")
        InfoLabels["FPS:"].Text = "FPS: " .. tostring(math.floor(1 / RunService.RenderStepped:Wait()))
        InfoLabels["Thời gian:"].Text = "Thời gian: " .. math.floor(tick() - startTime) .. "s"
        InfoLabels["Tổng Bounty Kill:"].Text = "Tổng Bounty Kill: " .. (getgenv().BountyKilled or 0)
        InfoLabels["Số người server:"].Text = "Số người server: " .. #Players:GetPlayers()
    end
end)
-- // Anura Hub - Auto Bounty Part2.lua (Target Finder + AFK Mode)
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Khởi tạo biến toàn cục
getgenv().Anura_CurrentTarget = nil
getgenv().Anura_NextTarget = false
getgenv().BountyKilled = 0
local lastKillTime = tick()

-- Hàm kiểm tra player có hợp lệ không
local function isValidTarget(player)
    local char = player.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then return false end
    if player == LocalPlayer then return false end
    if player.Team == LocalPlayer.Team then return false end
    if player:FindFirstChild("Data") and player.Data.PvP.Value == false then return false end
    if (char:FindFirstChild("ForceField") or char:FindFirstChild("SafeZone")) then return false end
    if char:FindFirstChild("Humanoid") and char.Humanoid.Health < 5 then return false end
    return true
end

-- Tìm player gần nhất
local function getClosestTarget()
    local closest, shortest = nil, math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if isValidTarget(player) then
            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            local myHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp and myHRP then
                local dist = (myHRP.Position - hrp.Position).Magnitude
                if dist < shortest then
                    shortest = dist
                    closest = player
                end
            end
        end
    end
    return closest
end

-- Tự đổi target nếu bị stuck, AFK, hoặc lâu quá không kill
spawn(function()
    while true do
        task.wait(0.5)
        if not getgenv().Anura_CurrentTarget or not isValidTarget(getgenv().Anura_CurrentTarget) or getgenv().Anura_NextTarget then
            getgenv().Anura_NextTarget = false
            local newTarget = getClosestTarget()
            getgenv().Anura_CurrentTarget = newTarget
            lastKillTime = tick()
        end

        -- Nếu quá 25s không kill được thì đổi target
        if getgenv().Anura_CurrentTarget and tick() - lastKillTime > 25 then
            getgenv().Anura_NextTarget = true
        end
    end
end)

-- AFK Mode: đổi vũ khí liên tục để tránh bị kick
spawn(function()
    local tools = {"Combat", "Black Leg", "Electric", "Sharkman Karate", "Dragon Claw", "Death Step", "Superhuman", "Electric Claw", "Dark Blade"}
    local index = 1
    while true do
        task.wait(10)
        if getgenv().AFK_Mode or not getgenv().Anura_CurrentTarget then
            local toolName = tools[index % #tools + 1]
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("equipItem", toolName)
            index += 1
        end
    end
end)
-- // Anura Hub - Auto Bounty Part3.lua (Tween TP + Auto Combo + Weapon Switch)
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local ComboOrder = {
    {type="Melee", skill="C"},
    {type="Melee", skill="X"},
    {type="Fruit", skill="Z"},
    {type="Fruit", skill="X"},
    {type="Melee", skill="Z"},
    {type="Sword", skill="Z"},
    {type="Gun", skill="X"},
    {type="Fruit", skill="C"},
    {type="Sword", skill="X"},
    {type="Gun", skill="Z"},
    {type="Fruit", skill="V"},
    {type="Fruit", skill="F"},
}

local WeaponList = {
    Melee = {"Combat", "Black Leg", "Electric", "Sharkman Karate", "Superhuman", "Death Step", "Electric Claw"},
    Sword = {"Dark Blade", "Yama", "Rengoku", "Saber", "Shisui"},
    Fruit = {"Dough-Dough", "Magma-Magma", "Dragon-Dragon", "Flame-Flame"},
    Gun = {"Kabucha", "Refined Slingshot", "Acidum Rifle"}
}

-- Tween bay đến player
local function TweenToTarget(target)
    if not target or not target.Character then return end
    local root = target.Character:FindFirstChild("HumanoidRootPart")
    local myRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if root and myRoot then
        local offsetPos = root.Position + Vector3.new(4, 10, 0)
        local tween = TweenService:Create(myRoot, TweenInfo.new((myRoot.Position - offsetPos).Magnitude / 300, Enum.EasingStyle.Linear), {CFrame = CFrame.new(offsetPos)})
        tween:Play()
        tween.Completed:Wait()
    end
end

-- Dùng skill theo thứ tự
local function CastSkill(skill)
    local VirtualInput = game:GetService("VirtualInputManager")
    local key = skill:upper()
    VirtualInput:SendKeyEvent(true, key, false, game)
    task.wait(0.2)
    VirtualInput:SendKeyEvent(false, key, false, game)
end

-- Tự đổi vũ khí đúng loại
local function EquipWeaponByType(weaponType)
    for _, weaponName in ipairs(WeaponList[weaponType]) do
        ReplicatedStorage.Remotes.CommF_:InvokeServer("equipItem", weaponName)
        task.wait(0.1)
        local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
        if tool and tool.Name == weaponName then break end
    end
end

-- Tự combo theo thứ tự
local function AutoCombo(target)
    for _, v in ipairs(ComboOrder) do
        if not getgenv().Anura_CurrentTarget or getgenv().Anura_CurrentTarget ~= target then break end
        EquipWeaponByType(v.type)
        task.wait(0.1)
        CastSkill(v.skill)
        task.wait(0.7)
    end
end

-- Vòng lặp bay đến player và combo
spawn(function()
    while true do
        task.wait(0.7)
        local target = getgenv().Anura_CurrentTarget
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            TweenToTarget(target)
            AutoCombo(target)

            -- Nếu gần thì dùng melee đánh thường
            local myHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local tarHRP = target.Character:FindFirstChild("HumanoidRootPart")
            if myHRP and tarHRP and (myHRP.Position - tarHRP.Position).Magnitude < 10 then
                EquipWeaponByType("Melee")
            end
        end
    end
end)
-- // Anura Hub - Auto Bounty Part4.lua (Auto Buffs + HUD + ServerHop + Anti Die)
local lp = game:GetService("Players").LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local run = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

-- Auto bật PvP / Instinct / Aura / V3 / V4
spawn(function()
    while true do
        task.wait(2)
        pcall(function()
            if rs:FindFirstChild("Remotes") then
                rs.Remotes.CommF_:InvokeServer("EnableBuso")
                rs.Remotes.CommF_:InvokeServer("ActivateObservationHaki")
                rs.Remotes.CommF_:InvokeServer("SetTeam", getgenv().Anura_Team or "Pirates")
                rs.Remotes.CommF_:InvokeServer("EnablePvp")
                rs.Remotes.CommF_:InvokeServer("Awakening", "Z")
                rs.Remotes.CommF_:InvokeServer("Awakening", "X")
                rs.Remotes.CommF_:InvokeServer("Awakening", "C")
                rs.Remotes.CommF_:InvokeServer("Awakening", "V")
                rs.Remotes.CommF_:InvokeServer("Awakening", "F")
            end
        end)
    end
end)

-- Summon Sea Beast nếu đủ 10M bounty
spawn(function()
    while true do
        task.wait(10)
        pcall(function()
            local bounty = lp.leaderstats["Bounty/Honor"].Value
            if bounty >= 10000000 then
                rs.Remotes.CommF_:InvokeServer("SeaBeast:Spawn")
            end
        end)
    end
end)

-- Auto Server Hop khi hết target
function ServerHop()
    local ts = game:GetService("TeleportService")
    local servers = {}
    local req = game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100")
    local data = HttpService:JSONDecode(req)
    for _, v in pairs(data.data) do
        if v.playing < v.maxPlayers then
            table.insert(servers, v.id)
        end
    end
    if #servers > 0 then
        ts:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], lp)
    end
end

-- Chống chết: hồi máu, giữ Instinct + Aura + PvP sau khi chết
lp.CharacterAdded:Connect(function(char)
    task.wait(2)
    rs.Remotes.CommF_:InvokeServer("EnableBuso")
    rs.Remotes.CommF_:InvokeServer("ActivateObservationHaki")
    rs.Remotes.CommF_:InvokeServer("EnablePvp")
end)

-- HUD thông tin (Bounty Kill, FPS, Thời gian, Tên Target, Tổng người)
local ScreenGui = Instance.new("ScreenGui", CoreGui)
ScreenGui.Name = "AnuraHUD"
local infoLabel = Instance.new("TextLabel", ScreenGui)
infoLabel.Position = UDim2.new(0.02, 0, 0.6, 0)
infoLabel.Size = UDim2.new(0, 270, 0, 140)
infoLabel.BackgroundTransparency = 0.3
infoLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
infoLabel.BorderSizePixel = 0
infoLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
infoLabel.TextStrokeTransparency = 0
infoLabel.Font = Enum.Font.GothamBold
infoLabel.TextSize = 14
infoLabel.TextWrapped = true
infoLabel.TextYAlignment = Enum.TextYAlignment.Top

-- Tính thời gian chạy script
local startTime = tick()
local function FormatTime(t)
    local mins = math.floor(t / 60)
    local secs = math.floor(t % 60)
    return mins.."m "..secs.."s"
end

-- Cập nhật thông tin liên tục
spawn(function()
    while true do
        task.wait(1)
        pcall(function()
            local currentTarget = getgenv().Anura_CurrentTarget and getgenv().Anura_CurrentTarget.Name or "None"
            local bounty = lp.leaderstats["Bounty/Honor"].Value
            local fps = math.floor(1 / run.RenderStepped:Wait())
            local timeUsed = FormatTime(tick() - startTime)
            local players = #game.Players:GetPlayers()

            infoLabel.Text = "Anura Hub | Auto Bounty\n"
            infoLabel.Text = infoLabel.Text .. "Target: "..currentTarget.."\n"
            infoLabel.Text = infoLabel.Text .. "Bounty: "..bounty.."\n"
            infoLabel.Text = infoLabel.Text .. "Players: "..players.."\n"
            infoLabel.Text = infoLabel.Text .. "FPS: "..fps.."\n"
            infoLabel.Text = infoLabel.Text .. "Time: "..timeUsed
        end)
    end
end)
-- // Anura Hub - Auto Bounty Part5.lua (Auto Target + SafeZone Check + Kill Confirm + AFK Mode)
local lp = game.Players.LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local run = game:GetService("RunService")

-- Kiểm tra Player có trong Safe Zone không
local function IsInSafeZone(player)
    if not player.Character then return true end
    local pos = player.Character:FindFirstChild("HumanoidRootPart")
    if pos then
        for _, v in pairs(workspace:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("Name") and tostring(v.Name):lower():find("safezone") then
                if (v.Position - pos.Position).Magnitude < 50 then
                    return true
                end
            end
        end
    end
    return false
end

-- Kiểm tra PvP đã bật chưa
local function IsPvPOn(player)
    if not player then return false end
    if player:FindFirstChild("PlayerGui") then
        local gui = player.PlayerGui:FindFirstChild("PvpDisabled")
        return not gui or not gui.Enabled
    end
    return true
end

-- Lấy player gần nhất (có PvP + không SafeZone)
function GetClosestTarget()
    local closest, distance = nil, math.huge
    for _, v in pairs(game.Players:GetPlayers()) do
        if v ~= lp and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            if v.Team ~= lp.Team and IsPvPOn(v) and not IsInSafeZone(v) then
                local mag = (lp.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).Magnitude
                if mag < distance then
                    distance = mag
                    closest = v
                end
            end
        end
    end
    return closest
end

-- Gán mục tiêu mới khi không còn hoặc bị kill
spawn(function()
    while true do
        task.wait(3)
        pcall(function()
            if not getgenv().Anura_CurrentTarget or not game.Players:FindFirstChild(getgenv().Anura_CurrentTarget.Name) then
                getgenv().Anura_CurrentTarget = GetClosestTarget()
            end
        end)
    end
end)

-- Auto bỏ target nếu target trong safezone / chưa bật PvP
spawn(function()
    while true do
        task.wait(2)
        local tar = getgenv().Anura_CurrentTarget
        if tar and (IsInSafeZone(tar) or not IsPvPOn(tar)) then
            getgenv().Anura_CurrentTarget = nil
        end
    end
end)

-- Nếu bị kill thì auto đổi target
lp.CharacterAdded:Connect(function()
    task.wait(1)
    getgenv().Anura_CurrentTarget = nil
end)

-- Nếu kill được người chơi, xác nhận kill => đổi target
game.Players.PlayerRemoving:Connect(function(player)
    if getgenv().Anura_CurrentTarget and player == getgenv().Anura_CurrentTarget then
        getgenv().Anura_CurrentTarget = nil
    end
end)

-- AFK Mode: Đổi vũ khí liên tục để tránh bị kick
local weaponIndex = 1
local function RotateWeapons()
    local tools = {"Melee", "Sword", "Gun", "Fruit"}
    weaponIndex = weaponIndex + 1
    if weaponIndex > #tools then weaponIndex = 1 end
    local toolName = tools[weaponIndex]
    for _, tool in pairs(lp.Backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.ToolTip:find(toolName) then
            lp.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
            break
        end
    end
end

-- Thực hiện đổi vũ khí liên tục khi idle
spawn(function()
    while true do
        task.wait(15)
        pcall(function()
            RotateWeapons()
        end)
    end
end)
-- // Anura Hub - Auto Bounty Part6.lua (Tween TP + Aimbot + Auto Combo Skill)

local lp = game.Players.LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local tween = game:GetService("TweenService")

-- Tween đến gần target (offset -5, tốc độ 300)
function TweenToTarget(target)
    if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then return end
    local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local pos = target.Character.HumanoidRootPart.Position + Vector3.new(0, 0, -5)
    local dist = (hrp.Position - pos).Magnitude
    local tInfo = TweenInfo.new(dist / 300, Enum.EasingStyle.Linear)
    local goal = {CFrame = CFrame.new(pos)}
    local tw = tween:Create(hrp, tInfo, goal)
    tw:Play()
    tw.Completed:Wait()
end

-- Aimbot Head
function AimAtHead(target)
    if not target or not target.Character or not target.Character:FindFirstChild("Head") then return end
    local cam = workspace.CurrentCamera
    cam.CFrame = CFrame.new(cam.CFrame.Position, target.Character.Head.Position)
end

-- Danh sách skill theo combo
local skillList = {
    {Type = "Melee", Key = "C"}, {Type = "Melee", Key = "X"},
    {Type = "Fruit", Key = "Z"}, {Type = "Fruit", Key = "X"},
    {Type = "Melee", Key = "Z"},
    {Type = "Sword", Key = "Z"},
    {Type = "Gun", Key = "X"},
    {Type = "Fruit", Key = "C"},
    {Type = "Sword", Key = "X"},
    {Type = "Gun", Key = "Z"},
    {Type = "Fruit", Key = "V"},
    {Type = "Fruit", Key = "F"}
}

-- Auto đổi vũ khí phù hợp
function EquipWeaponByType(t)
    for _, tool in pairs(lp.Backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.ToolTip:find(t) then
            lp.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
            break
        end
    end
end

-- Auto đánh thường
function StartNormalAttack()
    local tool = lp.Character and lp.Character:FindFirstChildWhichIsA("Tool")
    if tool then
        local handle = tool:FindFirstChild("Handle") or tool
        for i = 1, 5 do
            rs:WaitForChild("Remotes").CommF_:InvokeServer("Combat", "Attack", handle)
            task.wait(0.1)
        end
    end
end

-- Thực hiện combo kỹ năng
function DoCombo()
    for _, skill in ipairs(skillList) do
        EquipWeaponByType(skill.Type)
        task.wait(0.1)
        keypress(Enum.KeyCode[skill.Key])
        task.wait(0.05)
        keyrelease(Enum.KeyCode[skill.Key])
        task.wait(0.7)
    end
    StartNormalAttack()
end

-- Vòng lặp liên tục Combo + Aimbot + Tween TP
spawn(function()
    while true do
        task.wait(0.5)
        pcall(function()
            local tar = getgenv().Anura_CurrentTarget
            if tar and tar.Character and tar.Character:FindFirstChild("HumanoidRootPart") then
                TweenToTarget(tar)
                AimAtHead(tar)
                DoCombo()
            end
        end)
    end
end)
-- // Anura Hub - Auto Bounty Part7.lua (Auto Buff + Server Hop + GUI + Anti Lag)

local lp = game.Players.LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local http = game:GetService("HttpService")
local tpService = game:GetService("TeleportService")
local coreGui = game:GetService("CoreGui")

-- Auto bật PvP, Aura, Instinct, Race
spawn(function()
    while true do
        task.wait(2)
        pcall(function()
            rs.Remotes.CommF_:InvokeServer("EnablePvp")
            rs.Remotes.CommF_:InvokeServer("Buso")
            rs.Remotes.CommF_:InvokeServer("Ken")
            rs.Remotes.CommF_:InvokeServer("ActivateRaceAbility")
        end)
    end
end)

-- Auto Summon Sea Beast khi đủ 10M bounty
spawn(function()
    while true do
        task.wait(5)
        local bounty = lp:FindFirstChild("Data") and lp.Data:FindFirstChild("Bounty")
        if bounty and bounty.Value >= 10000000 then
            rs.Remotes.CommF_:InvokeServer("SeaBeast", true)
        end
    end
end)

-- Server Hop khi hết player
spawn(function()
    while true do
        task.wait(10)
        local count = 0
        for _, p in pairs(game.Players:GetPlayers()) do
            if p ~= lp and p.Team ~= lp.Team then
                count = count + 1
            end
        end
        if count == 0 then
            local servers = {}
            local req = game:HttpGet("https://games.roblox.com/v1/games/2753915549/servers/Public?sortOrder=Asc&limit=100")
            local decoded = http:JSONDecode(req)
            for _, s in pairs(decoded.data) do
                if s.playing < s.maxPlayers then
                    table.insert(servers, s.id)
                end
            end
            if #servers > 0 then
                tpService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], lp)
            end
        end
    end
end)

-- GUI HUD kill/fps/bounty/target
local screenGui = Instance.new("ScreenGui", coreGui)
screenGui.Name = "Anura_HUD"

local text = Instance.new("TextLabel", screenGui)
text.Size = UDim2.new(0, 300, 0, 200)
text.Position = UDim2.new(0.5, -150, 0, 0)
text.BackgroundTransparency = 1
text.TextColor3 = Color3.fromRGB(255, 255, 255)
text.Font = Enum.Font.GothamBold
text.TextSize = 14
text.TextXAlignment = Enum.TextXAlignment.Left
text.TextYAlignment = Enum.TextYAlignment.Top

spawn(function()
    local startTime = tick()
    while task.wait(0.2) do
        local fps = math.floor(1 / game:GetService("RunService").RenderStepped:Wait())
        local tar = getgenv().Anura_CurrentTarget
        local bounty = lp:FindFirstChild("Data") and lp.Data:FindFirstChild("Bounty")
        text.Text = "Anura Hub - Auto Bounty\n"
            .. "FPS: " .. fps .. "\n"
            .. "Your Bounty: " .. (bounty and bounty.Value or "Loading") .. "\n"
            .. "Target: " .. (tar and tar.Name or "None") .. "\n"
            .. "Time: " .. math.floor(tick() - startTime) .. "s\n"
            .. "Server Players: " .. #game.Players:GetPlayers()
    end
end)

-- Anti lag tối đa
for _, v in pairs(workspace:GetDescendants()) do
    if v:IsA("BasePart") then
        v.Material = Enum.Material.SmoothPlastic
        v.Reflectance = 0
    end
    if v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Enabled = false
    end
end

settings().Rendering.QualityLevel = 1
setfpscap(30)
-- // Anura Hub - Auto Bounty Part8.lua (AFK Mode + Auto Team + Combat + Anti Kick)

local lp = game.Players.LocalPlayer
local rs = game:GetService("ReplicatedStorage")

-- Auto chọn team theo config
local configTeam = "Pirates" -- hoặc "Marines"
spawn(function()
    while not lp.Team do task.wait() end
    if lp.Team.Name ~= configTeam then
        repeat
            rs.Remotes.CommF_:InvokeServer("SetTeam", configTeam)
            task.wait(2)
        until lp.Team.Name == configTeam
    end
end)

-- AFK Mode: Đổi vũ khí liên tục để tránh văng game
spawn(function()
    local weapons = {"Melee", "Sword", "Gun", "Fruit"}
    while true do
        for _, v in ipairs(weapons) do
            pcall(function()
                for _, tool in pairs(lp.Backpack:GetChildren()) do
                    if tool:IsA("Tool") and string.find(tool.Name:lower(), v:lower()) then
                        lp.Character.Humanoid:EquipTool(tool)
                        task.wait(0.5)
                        break
                    end
                end
            end)
        end
        task.wait(5)
    end
end)

-- Anti kick (idle)
game:GetService("VirtualUser").Button1Down:Connect(function()
    task.wait(1)
end)
lp.Idled:Connect(function()
    game:GetService("VirtualUser"):Button1Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

-- TweenService tối ưu
function TweenTo(pos)
    local ts = game:GetService("TweenService")
    local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
    if hrp then
        local tween = ts:Create(hrp, TweenInfo.new((hrp.Position - pos).Magnitude / 300, Enum.EasingStyle.Linear), {CFrame = CFrame.new(pos)})
        tween:Play()
        tween.Completed:Wait()
    end
end

-- Combat check safe zone
function IsInSafeZone(player)
    local pChar = player.Character
    if not pChar then return true end
    if pChar:FindFirstChild("HumanoidRootPart") then
        local pos = pChar.HumanoidRootPart.Position
        local zone1 = workspace:FindFirstChild("SafeZone")
        if zone1 and (zone1.Position - pos).Magnitude < 300 then
            return true
        end
    end
    return false
end

-- Combat tự đổi target nếu target chết, vào safezone, hoặc không bật PvP
function ValidTarget(plr)
    return plr
        and plr.Character
        and plr.Character:FindFirstChild("HumanoidRootPart")
        and not IsInSafeZone(plr)
        and plr.Team ~= lp.Team
        and plr:FindFirstChild("Data")
        and plr.Data.PvP.Value == true
end

function GetNearestEnemy()
    local closest, dist = nil, math.huge
    for _, p in pairs(game.Players:GetPlayers()) do
        if ValidTarget(p) then
            local hrp = p.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local d = (lp.Character.HumanoidRootPart.Position - hrp.Position).Magnitude
                if d < dist then
                    closest = p
                    dist = d
                end
            end
        end
    end
    return closest
end

-- Tự động cập nhật target nếu bị kill hoặc target không hợp lệ
spawn(function()
    while true do
        task.wait(2)
        local target = getgenv().Anura_CurrentTarget
        if not ValidTarget(target) then
            getgenv().Anura_CurrentTarget = GetNearestEnemy()
        end
    end
end)
-- // Anura Hub - Auto Bounty Part9.lua (Combo Manager + Delay + Reset Fix)

local lp = game.Players.LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local comboOrder = {
    {type="Melee", key="C"},
    {type="Melee", key="X"},
    {type="Fruit", key="Z"},
    {type="Fruit", key="X"},
    {type="Melee", key="Z"},
    {type="Sword", key="Z"},
    {type="Gun", key="X"},
    {type="Fruit", key="C"},
    {type="Sword", key="X"},
    {type="Gun", key="Z"},
    {type="Fruit", key="V"},
    {type="Fruit", key="F"},
}

-- Tự động bật lại khi chết hoặc lỗi
spawn(function()
    while true do
        if not lp.Character or not lp.Character:FindFirstChild("HumanoidRootPart") then
            repeat task.wait(2) until lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
            task.wait(3)
        end
        task.wait(1)
    end
end)

-- Auto Equip Tool theo type
function EquipType(typ)
    for _, tool in pairs(lp.Backpack:GetChildren()) do
        if tool:IsA("Tool") and string.find(tool.Name:lower(), typ:lower()) then
            lp.Character.Humanoid:EquipTool(tool)
            break
        end
    end
end

-- Nhấn phím dùng skill
function PressKey(key)
    pcall(function()
        keypress(Enum.KeyCode[key])
        task.wait(0.1)
        keyrelease(Enum.KeyCode[key])
    end)
end

-- Delay thực thi skill
function DelaySkill()
    task.wait(0.2)
end

-- Thực hiện combo
function DoCombo()
    for _, combo in ipairs(comboOrder) do
        EquipType(combo.type)
        DelaySkill()
        PressKey(combo.key)
        DelaySkill()
    end
end

-- Combat chính
spawn(function()
    while true do
        task.wait(1)
        local target = getgenv().Anura_CurrentTarget
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local pos = target.Character.HumanoidRootPart.Position + Vector3.new(3, 0, 3)
            TweenTo(pos)
            task.wait(0.2)
            DoCombo()
        end
    end
end)
-- // Anura Hub - Auto Bounty Part10.lua (HUD + ServerHop + Info)
local lp = game.Players.LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local ws = game:GetService("Workspace")
local vu = game:GetService("VirtualUser")
local http = game:GetService("HttpService")
local players = game:GetService("Players")
local ts = game:GetService("TweenService")

local startTime = tick()
local totalKill = 0
local lastTarget = ""
local runService = game:GetService("RunService")

-- UI Setup
local screenGui = Instance.new("ScreenGui", lp.PlayerGui)
screenGui.Name = "AnuraHUD"

local infoLabel = Instance.new("TextLabel", screenGui)
infoLabel.Size = UDim2.new(0, 320, 0, 120)
infoLabel.Position = UDim2.new(0.01, 0, 0.4, 0)
infoLabel.BackgroundTransparency = 0.4
infoLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
infoLabel.TextColor3 = Color3.new(1, 1, 1)
infoLabel.TextXAlignment = Enum.TextXAlignment.Left
infoLabel.Font = Enum.Font.SourceSansSemibold
infoLabel.TextSize = 18
infoLabel.TextWrapped = true

-- Format thời gian
local function FormatTime(s)
    local h = math.floor(s / 3600)
    local m = math.floor((s % 3600) / 60)
    local sec = math.floor(s % 60)
    return string.format("%02d:%02d:%02d", h, m, sec)
end

-- HUD Update Loop
spawn(function()
    while true do
        task.wait(0.5)
        local currentTarget = getgenv().Anura_CurrentTarget
        local fps = math.floor(1 / runService.RenderStepped:Wait())
        local totalPlayers = #players:GetPlayers()
        local timeUsed = FormatTime(tick() - startTime)

        if currentTarget and currentTarget.Name ~= lastTarget then
            lastTarget = currentTarget.Name
            totalKill = totalKill + 1
        end

        infoLabel.Text = 
            "Anura Hub - Auto Bounty\n" ..
            "Kill: " .. totalKill .. "\n" ..
            "Target: " .. (currentTarget and currentTarget.Name or "None") .. "\n" ..
            "Players: " .. totalPlayers .. "\n" ..
            "FPS: " .. fps .. "\n" ..
            "Time Used: " .. timeUsed
    end
end)

-- Auto ServerHop khi hết target
spawn(function()
    while true do
        task.wait(8)
        local hasEnemy = false
        for _, plr in pairs(players:GetPlayers()) do
            if plr ~= lp and plr.Team ~= lp.Team and not plr.Neutral and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                if not plr.Character:FindFirstChild("ForceField") then
                    hasEnemy = true
                    break
                end
            end
        end

        if not hasEnemy then
            pcall(function()
                local servers = http:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"))
                for _, v in pairs(servers.data) do
                    if v.playing < v.maxPlayers then
                        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, v.id)
                        break
                    end
                end
            end)
        end
    end
end)
-- // Anura Hub - Auto Bounty Part11.lua (AFK Mode + Anti-Lag + Anti-Kick + Anti-Ban)
local vu = game:GetService("VirtualUser")
local lp = game.Players.LocalPlayer
local rs = game:GetService("RunService")
local lighting = game:GetService("Lighting")

-- Anti AFK Kick
lp.Idled:Connect(function()
    vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    wait(1)
    vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

-- AFK Mode: tự động đổi vũ khí luân phiên để tránh văng
spawn(function()
    while true do
        wait(15)
        pcall(function()
            local list = {"Melee", "Sword", "Gun", "Fruit"}
            for _, v in pairs(list) do
                for _, tool in pairs(lp.Backpack:GetChildren()) do
                    if string.find(tool.Name:lower(), v:lower()) then
                        lp.Character.Humanoid:EquipTool(tool)
                        wait(0.3)
                        break
                    end
                end
            end
        end)
    end
end)

-- Anti-Lag: Tối ưu performance, giữ FPS cao khi AFK lâu
spawn(function()
    while true do
        wait(10)
        pcall(function()
            for _, v in pairs(workspace:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") then
                    v:Destroy()
                elseif v:IsA("Decal") then
                    v.Transparency = 1
                end
            end
        end)
        lighting.GlobalShadows = false
        lighting.FogEnd = 100000
        lighting.Brightness = 1
        settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
    end
end)

-- Anti Ban Update 26 (ẩn hành động nghi vấn)
pcall(function()
    if getconnections then
        for _, v in pairs(getconnections(lp.Idled)) do
            v:Disable()
        end
    end
end)

-- Gỡ hiệu ứng nghi ngờ
spawn(function()
    while true do
        wait(8)
        pcall(function()
            for _, v in pairs(lp.Character:GetDescendants()) do
                if v:IsA("Highlight") or v:IsA("SelectionBox") or v:IsA("BillboardGui") then
                    v:Destroy()
                end
            end
        end)
    end
end)
-- // Anura Hub - Auto Bounty Part12.lua (Auto bật Aura, Instinct, V3, V4)

local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local lp = game.Players.LocalPlayer

-- Hàm bấm phím
function PressKey(key)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
    wait(0.1)
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

-- Tự động bật Aura (phím J), Instinct (E), V3 (T), V4 (Y)
spawn(function()
    while true do
        wait(3)
        pcall(function()
            -- Auto bật Aura nếu chưa bật
            if lp.Character:FindFirstChild("HasBuso") == nil then
                PressKey("J")
            end

            -- Auto bật Instinct nếu chưa bật
            if lp.Character:FindFirstChild("FlashStep") == nil then
                PressKey("E")
            end

            -- Tộc V3 (T) và V4 (Y) không thể xác định trực tiếp nên sẽ spam bật liên tục
            PressKey("T") -- V3
            wait(0.2)
            PressKey("Y") -- V4
        end)
    end
end)
--[[
  Anura Hub - Auto Bounty | Part13.lua
  Nội dung:
    - Tự động triệu hồi Sea Beast khi bounty >= 10 triệu
    - Combo skill mượt hơn, chính xác hơn, delay giảm còn 0.2s
]]

local function GetBounty()
    local plr = game.Players.LocalPlayer
    local stats = plr:FindFirstChild("leaderstats")
    if stats and stats:FindFirstChild("Bounty") then
        local bountyStr = stats.Bounty.Value
        return tonumber(bountyStr:gsub(",", ""))
    end
    return 0
end

-- Auto Summon Sea Beast khi đạt 10 triệu bounty
spawn(function()
    while task.wait(2) do
        if GetBounty() >= 10000000 then
            keypress(0x4B) -- K (triệu hồi Sea Beast)
            wait(0.3)
            keyrelease(0x4B)
        end
    end
end)

-- Combo Skill cải tiến
local comboSkills = {
    {Weapon = "Melee", Key = "C"},
    {Weapon = "Melee", Key = "X"},
    {Weapon = "Fruit", Key = "Z"},
    {Weapon = "Fruit", Key = "X"},
    {Weapon = "Melee", Key = "Z"},
    {Weapon = "Sword", Key = "Z"},
    {Weapon = "Gun", Key = "X"},
    {Weapon = "Fruit", Key = "C"},
    {Weapon = "Sword", Key = "X"},
    {Weapon = "Gun", Key = "Z"},
    {Weapon = "Fruit", Key = "V"},
    {Weapon = "Fruit", Key = "F"},
}

-- Đổi vũ khí
function SwitchWeapon(name)
    local inv = game.Players.LocalPlayer.Backpack:GetChildren()
    for _, tool in pairs(inv) do
        if tool:IsA("Tool") and string.find(tool.Name:lower(), name:lower()) then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(tool)
            wait(0.1)
            break
        end
    end
end

-- Sử dụng phím
function PressKey(key)
    keypress(string.byte(key:upper()))
    wait(0.1)
    keyrelease(string.byte(key:upper()))
end

-- Chạy combo skill liên tục
spawn(function()
    while task.wait(0.5) do
        for _, skill in pairs(comboSkills) do
            SwitchWeapon(skill.Weapon)
            wait(0.1)
            PressKey(skill.Key)
            wait(0.2)
        end
    end
end)
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RunService = game:GetService("RunService")

local function IsSafeZone(plr)
    local char = plr.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then return true end
    local pos = char.HumanoidRootPart.Position
    -- Điều kiện SafeZone: gần NPC hoặc khu vực không PVP
    return workspace:FindFirstChild("SafeZone") and (pos - workspace.SafeZone.Position).Magnitude < 150
end

local function HasPvP(plr)
    local tag = plr:FindFirstChild("Data") and plr.Data:FindFirstChild("PvP")
    return tag and tag.Value == true
end

local function GetClosestPlayer()
    local closestPlayer, closestDist = nil, math.huge
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") and plr.Character.Humanoid.Health > 0 then
            if not IsSafeZone(plr) and HasPvP(plr) then
                local dist = (plr.Character.HumanoidRootPart.Position - Character.HumanoidRootPart.Position).Magnitude
                if dist < closestDist then
                    closestDist = dist
                    closestPlayer = plr
                end
            end
        end
    end
    return closestPlayer
end

local function EquipMelee()
    for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
        if tool:IsA("Tool") and (tool.ToolTip == "Melee" or tool.Name:lower():find("combat") or tool.Name:lower():find("fighting")) then
            LocalPlayer.Character.Humanoid:EquipTool(tool)
            break
        end
    end
end

RunService.Stepped:Connect(function()
    local target = GetClosestPlayer()
    if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
        local dist = (target.Character.HumanoidRootPart.Position - Character.HumanoidRootPart.Position).Magnitude
        if dist < 25 then
            EquipMelee()
            -- Gõ thường nếu ở gần player
            mouse1click()
        end
    end
end)
-- ANTI LAG NÂNG CAO
local debris = {
    "Rain", "Dust", "Lightning", "FallingLeaves", "Spark", "Trail", "Light", "Fire", "Smoke", "Cloud", "Ray"
}

for _, desc in ipairs(debris) do
    for _, v in ipairs(workspace:GetDescendants()) do
        if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Light") or v:IsA("Beam") or v:IsA("Fire") or v:IsA("Smoke") then
            if v.Name:lower():find(desc:lower()) or v.Parent.Name:lower():find(desc:lower()) then
                v:Destroy()
            end
        end
    end
end

-- Auto dọn hiệu ứng mỗi 30 giây
while true do
    task.wait(30)
    for _, v in ipairs(workspace:GetDescendants()) do
        if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Light") or v:IsA("Beam") or v:IsA("Fire") or v:IsA("Smoke") then
            v:Destroy()
        end
    end
end
-- AUTO NÉ PLAYER NGUY HIỂM / BOSS

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")

RunService.Heartbeat:Connect(function()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
            local h = v.Humanoid
            local hrp = v.HumanoidRootPart
            local isDanger = false
            if h.Health > 0 then
                if v.Name:lower():find("boss") or v.Name:lower():find("sea king") or v.Name:lower():find("rip_") then
                    isDanger = true
                elseif Players:FindFirstChild(v.Name) and v:FindFirstChild("HasBuso") then
                    isDanger = true
                end
            end

            if isDanger then
                local dist = (HRP.Position - hrp.Position).Magnitude
                if dist < 100 then
                    local direction = (HRP.Position - hrp.Position).Unit * 200
                    HRP.CFrame = CFrame.new(HRP.Position + direction)
                end
            end
        end
    end
end)
local Players = game:GetService("Players")
local Stats = game:GetService("Stats")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

local screenGui = Instance.new("ScreenGui", game.CoreGui)
screenGui.Name = "AnuraHUD"
screenGui.ResetOnSpawn = false

local frame = Instance.new("Frame", screenGui)
frame.Position = UDim2.new(0, 10, 0, 10)
frame.Size = UDim2.new(0, 300, 0, 160)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BackgroundTransparency = 0.2
frame.BorderSizePixel = 0
frame.Visible = true
frame.Active = true
frame.Draggable = true

local infoLabels = {}
local labelNames = {
    "Target", "Bounty", "Kills", "Ping", "FPS", "Sea", "PvP", "Time Used"
}

for i, name in ipairs(labelNames) do
    local lbl = Instance.new("TextLabel", frame)
    lbl.Size = UDim2.new(1, -10, 0, 18)
    lbl.Position = UDim2.new(0, 5, 0, (i - 1) * 18)
    lbl.BackgroundTransparency = 1
    lbl.TextColor3 = Color3.fromRGB(255, 255, 255)
    lbl.Font = Enum.Font.Code
    lbl.TextSize = 14
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    infoLabels[name] = lbl
end

-- Biến hỗ trợ
local bounty = 0
local kills = 0
local scriptStart = tick()

-- Hàm xác định Sea
local function getCurrentSea()
    local placeId = game.PlaceId
    if placeId == 2753915549 then return "Sea 1"
    elseif placeId == 4442272183 then return "Sea 2"
    elseif placeId == 7449423635 then return "Sea 3"
    else return "Unknown" end
end

-- Cập nhật HUD mỗi giây
RunService.RenderStepped:Connect(function()
    local fps = math.floor(1 / RunService.RenderStepped:Wait())
    local ping = Stats.Network.ServerStatsItem["Data Ping"]:GetValueString()
    ping = string.gsub(ping, " ms", "")

    local char = LocalPlayer.Character
    local humanoid = char and char:FindFirstChildOfClass("Humanoid")
    local currentTarget = _G.CurrentTarget or "None"
    local pvp = LocalPlayer:FindFirstChild("PlayerGui") and LocalPlayer.PlayerGui:FindFirstChild("CombatFramework") and "On" or "Off"

    infoLabels["Target"].Text = "Target: " .. tostring(currentTarget)
    infoLabels["Bounty"].Text = "Bounty: " .. LocalPlayer.leaderstats and LocalPlayer.leaderstats:FindFirstChild("Bounty") and LocalPlayer.leaderstats.Bounty.Value or "?"
    infoLabels["Kills"].Text = "Kills: " .. tostring(_G.TotalKills or kills)
    infoLabels["Ping"].Text = "Ping: " .. tostring(ping) .. " ms"
    infoLabels["FPS"].Text = "FPS: " .. tostring(fps)
    infoLabels["Sea"].Text = "Sea: " .. getCurrentSea()
    infoLabels["PvP"].Text = "PvP: " .. pvp
    infoLabels["Time Used"].Text = "Time: " .. os.date("!%H:%M:%S", tick() - scriptStart)
end)
-- Yêu cầu Part16 phải đã tạo GUI `AnuraHUD` và `frame`
local frame = game.CoreGui:FindFirstChild("AnuraHUD") and game.CoreGui.AnuraHUD:FindFirstChildOfClass("Frame")
if not frame then return end

-- Container cho các nút
local btnFrame = Instance.new("Frame", frame)
btnFrame.Position = UDim2.new(0, 0, 1, 5)
btnFrame.Size = UDim2.new(1, 0, 0, 90)
btnFrame.BackgroundTransparency = 1

-- Danh sách nút và hành động tương ứng
local buttons = {
    {Name = "Toggle HUD", Action = function()
        for _, v in ipairs(frame:GetChildren()) do
            if v:IsA("TextLabel") then
                v.Visible = not v.Visible
            end
        end
    end},

    {Name = "Reload", Action = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/YourScriptHere"))()
    end},

    {Name = "Random TP", Action = function()
        local char = game.Players.LocalPlayer.Character
        if char and char:FindFirstChild("HumanoidRootPart") then
            local pos = Vector3.new(math.random(-5000,5000), 300, math.random(-5000,5000))
            char:MoveTo(pos)
        end
    end},

    {Name = "Exit GUI", Action = function()
        if game.CoreGui:FindFirstChild("AnuraHUD") then
            game.CoreGui.AnuraHUD:Destroy()
        end
    end}
}

-- Tạo nút
for i, btnInfo in ipairs(buttons) do
    local btn = Instance.new("TextButton", btnFrame)
    btn.Size = UDim2.new(1, -10, 0, 20)
    btn.Position = UDim2.new(0, 5, 0, (i - 1) * 22)
    btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.Font = Enum.Font.Code
    btn.TextSize = 14
    btn.Text = btnInfo.Name
    btn.MouseButton1Click:Connect(btnInfo.Action)
end
--// Config chọn team: "Pirates", "Marines" hoặc "Random"
local teamConfig = "Pirates" -- Bạn có thể đổi thành "Marines" hoặc "Random"

--// Hàm chọn team
local function chooseTeam()
    local teams = {
        Pirates = "JoinPirates",
        Marines = "JoinMarines"
    }

    local player = game.Players.LocalPlayer
    local rep = game.ReplicatedStorage

    local chosen = teamConfig
    if teamConfig == "Random" then
        chosen = math.random(1, 2) == 1 and "Pirates" or "Marines"
    end

    if rep:FindFirstChild(teams[chosen]) then
        rep[teams[chosen]]:InvokeServer()
    end
end

--// Kiểm tra nếu chưa có team thì chọn
task.spawn(function()
    while task.wait(1) do
        local player = game.Players.LocalPlayer
        if player and not player.Team then
            chooseTeam()
        end
    end
end)
--// Cấu hình
local safeHeight = 900
local lowHP = 0.2  -- 20%
local returnHP = 0.3 -- 30%
local flyingAway = false
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")
local root = char:WaitForChild("HumanoidRootPart")

--// Hàm Tween bay đến vị trí an toàn
local function tweenTo(pos)
    local info = TweenInfo.new((root.Position - pos).Magnitude / 300, Enum.EasingStyle.Linear)
    local goal = {CFrame = CFrame.new(pos)}
    TweenService:Create(root, info, goal):Play()
end

--// Theo dõi máu
RunService.RenderStepped:Connect(function()
    pcall(function()
        local hp = hum.Health / hum.MaxHealth
        if hp < lowHP and not flyingAway then
            flyingAway = true
            local pos = root.Position + Vector3.new(0, safeHeight, 0)
            tweenTo(pos)
        elseif hp > returnHP and flyingAway then
            flyingAway = false
            local nearestPlayer = nil
            local shortest = math.huge
            for _, v in pairs(game.Players:GetPlayers()) do
                if v ~= player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Team ~= player.Team then
                    local dist = (v.Character.HumanoidRootPart.Position - root.Position).Magnitude
                    if dist < shortest then
                        shortest = dist
                        nearestPlayer = v
                    end
                end
            end
            if nearestPlayer then
                tweenTo(nearestPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 5, 0))
            end
        end
    end)
end)
--// Part21.lua - Thông báo KỈ NIỆM 50 NĂM
local function createNotify(Text, Duration)
    local CoreGui = game:GetService("StarterGui")
    CoreGui:SetCore("ChatMakeSystemMessage", {
        Text = Text,
        Color = Color3.fromRGB(255, 221, 0),
        Font = Enum.Font.SourceSansBold,
        FontSize = Enum.FontSize.Size24
    })
    
    local Billboard = Instance.new("BillboardGui")
    Billboard.Name = "Notify50Nam"
    Billboard.Size = UDim2.new(0, 400, 0, 50)
    Billboard.StudsOffset = Vector3.new(0, 5, 0)
    Billboard.AlwaysOnTop = true
    Billboard.Adornee = workspace.CurrentCamera

    local TextLabel = Instance.new("TextLabel", Billboard)
    TextLabel.Size = UDim2.new(1, 0, 1, 0)
    TextLabel.BackgroundTransparency = 1
    TextLabel.Text = Text
    TextLabel.TextColor3 = Color3.fromRGB(255, 221, 0)
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.TextScaled = true
    TextLabel.TextStrokeTransparency = 0.7

    Billboard.Parent = game:GetService("CoreGui")
    
    task.delay(Duration or 5, function()
        Billboard:Destroy()
    end)
end

--// Thông báo trên màn hình và chat
createNotify("KỈ NIỆM 50 NĂM", 4)
wait(1.5)
createNotify("<NGÀY GIẢI PHÓNG MIỀN NAM , THỐNG NHẤT ĐẤT NƯỚC>", 5)
--// Part22.lua - Auto Team + PvP
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local preferredTeam = "Pirates" -- "Pirates" hoặc "Marines"
local PvPEnabled = true

--// Tự động chọn team nếu chưa đúng
task.spawn(function()
	while task.wait(3) do
		pcall(function()
			if not LocalPlayer.Team or tostring(LocalPlayer.Team) ~= preferredTeam then
				warn("[AnuraHub] Chọn lại team:", preferredTeam)
				ReplicatedStorage.Remotes.CommF_:InvokeServer("SetTeam", preferredTeam)
			end
		end)
	end
end)

--// Tự động bật PvP mỗi 3 giây
task.spawn(function()
	while PvPEnabled do
		pcall(function()
			ReplicatedStorage.Remotes.CommF_:InvokeServer("EnablePvp")
		end)
		wait(3)
	end
end)

--// Gợi ý log để theo dõi trạng thái
warn("[AnuraHub] Auto Team + PvP đang chạy...")

